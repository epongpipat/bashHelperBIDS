#!/usr/bin/env bash

# ------------------------------------------------------------------------------
# paths
# ------------------------------------------------------------------------------
code_dir=`dirname $0`
code_dir=`dirname ${code_dir}`
# echo ${code_dir}
declare -A in_paths
in_paths[entities]="${code_dir}/bidsschema/objects_entities.yaml"
in_paths[datatypes]="${code_dir}/bidsschema/objects_datatypes.yaml"
in_paths[suffixes]="${code_dir}/bidsschema/objects_suffixes.yaml"
in_paths[rules]="${code_dir}/bidsschema/rules_entities.yaml"

# ------------------------------------------------------------------------------
# opts
# ------------------------------------------------------------------------------
entities_orig=(`cat ${in_paths[entities]} | grep -v '\ ' | grep ':' | sed 's/://g'`)
entities_order_name=(`cat ${in_paths[rules]} | grep -v "#" | grep -v "\-\-" | awk -F '- ' '{print $2}'`)
entities_name=(`cat ${in_paths[entities]} | grep "name:" | grep -v display_name | awk -F': ' '{print $2}'`)
datatypes=(`cat ${in_paths[datatypes]} | grep 'value: ' | awk -F ': ' '{print $2}'`)
suffixes=(`cat ${in_paths[suffixes]} | grep 'value: ' | awk -F ': ' '{print $2}'`)

declare -a entities_order
entities_order+=("bids_dir")
entities_order+=("output_dir")
entities_order+=("analysis_level")
entities_order+=("datatype")
for key in ${entities_order_name[@]}; do
    for i in ${!entities_orig[@]}; do
        if [[ ${entities_orig[$i]} == ${key} ]]; then
            entities_order+=(${entities_name[$i]})
        fi
    done
done
entities_order+=("suffix")
entities_order+=("extension")

entities_dashed=`echo ${entities_order[@]} | sed 's/ / --/g'`
entities_dashed="--${entities_dashed}"
entities_dashed=(`echo ${entities_dashed}`)

declare -A allowed_values
allowed_values[mt]="on off"
allowed_values[part]="mag phase real imag"
allowed_values[hemi]="L R"
allowed_values[analysis_level]="participant group"

# ------------------------------------------------------------------------------
# usage
# ------------------------------------------------------------------------------
usage_str=""
entities_req=(sub suffix extension)

usage_str="${usage_str}\nUsage:\n\t$0 --sub <sub> --suffix <suffix> --extension <extension> [options]"
usage_str="${usage_str}\n\nDescription:"
usage_str="${usage_str}\n\tGenerates a BIDS-compatible filename based on the entities provided."
usage_str="${usage_str}\n\nRequired arguments:"
for key in ${entities_req[@]}; do
    usage_str="${usage_str}\n\t--${key} <${key}>"
done
usage_str="${usage_str}\n\nOptional arguments:"
for key in ${entities_order[@]}; do
    if [[ ${entities_req[@]} =~ ${key} ]]; then
        # usage_str="${usage_str}\n-${key} <${key}> (required)"
        continue
    else
        usage_str="${usage_str}\n\t--${key} <${key}>"
    fi
done
usage_str="${usage_str}\n\nFor more details, please visit https://bids-specification.readthedocs.io/en/stable/appendices/entities.html"
usage_str="${usage_str}\n"


# ------------------------------------------------------------------------------
# parse arguments
# ------------------------------------------------------------------------------
if [ $# -eq 0 ]; then
    echo -e ${usage_str}
    exit 1
fi

help_args=("-h" "--help")
declare -A entities
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
            echo -e ${usage_str}
            exit 0
            ;;
        *)
            for key in ${entities_order[@]}; do
                if [[ ${help_args[@]} =~ $1 ]]; then
                    continue
                fi
                match_found=0
                for entity in ${entities_dashed[@]}; do
                    if [[ $1 == $entity ]]; then
                        match_found=1
                        break
                    fi
                done
                if [[ $match_found -eq 0 ]]; then
                    echo -e ${usage_str}
                    >&2 echo -e "[ERROR]\tnot a valid option ($1)"
                    exit 1
                fi
                if [[ -z $2 ]]; then
                    echo -e ${usage_str}
                    >&2 echo -e "[ERROR]\trequires an argument ($1)"
                    exit 1
                fi
                if [[ $1 == "--${key}" ]]; then
                    entities[${key}]=$2
                    shift 2
                fi
            done
            ;;
    esac
done

# ------------------------------------------------------------------------------
# checks
# ------------------------------------------------------------------------------
# required arguments
declare -a missing_args
for key in ${entities_req[@]}; do
    if [[ -z ${entities[${key}]} ]]; then
        missing_args+=("--${key}")
    fi
done
if [[ ${#missing_args[@]} -gt 0 ]]; then
    echo -e ${usage_str}
    >&2 echo -e "[ERROR]\tmissing required arguments: ${missing_args[@]}"
    exit 1
fi

# allowed values
declare -A invalid_args
for key in ${!entities[@]}; do
    if [[ -z ${allowed_values[${key}]} ]]; then
        continue
    elif [[ " ${allowed_values[${key}]} " =~ " ${entities[${key}]} " ]]; then
        continue
    else
        invalid_args[${key}]=${entities[${key}]}
    fi
done
if [[ ${#invalid_args[@]} -gt 0 ]]; then
    echo -e ${usage_str}
    for key in ${!invalid_args[@]}; do
        >&2 echo -e "[ERROR]\tvalue (${invalid_args[${key}]}) is not allowed for key (--${key}) (allowed values: ${allowed_values[${key}]})"
    done
    exit 1
fi

# datatype
if [[ ! -z ${entities[datatype]} ]] && [[ ! " ${datatypes[@]} " =~ " ${entities[datatype]} " ]]; then
    >&2 echo -e "[WARNING]\tvalue (${entities[datatype]}) is not recognized for key (--datatype) (recognized values: ${datatypes[@]})"
fi

# suffix
if [[ ! " ${suffixes[@]} " =~ " ${entities[suffix]} " ]]; then
    >&2 echo -e "[WARNING]\tvalue (${entities[suffix]}) is not recognized for key (--suffix)"
fi

# bids_dir and output_dir
if [[ ! -z ${entities[bids_dir]} ]] && [[ ! -z {entities[output_dir]} ]]; then
    >&2 echo -e "[ERROR]\tbids_dir and output_dir cannot be used together"
    exit 1
fi

# ------------------------------------------------------------------------------
# main
# ------------------------------------------------------------------------------
path="sub-${entities[sub]}"
if [[ ! -z ${entities[ses]} ]]; then
    path="${path}_ses-${entities[ses]}"
fi

if [[ -z ${entities[ses]} ]] && [[ ! -z ${entities[datatype]} ]]; then
    path="sub-${entities[sub]}/${entities[datatype]}/${path}"
elif [[ ! -z ${entities[ses]} ]] && [[ ! -z ${entities[datatype]} ]]; then
    path="sub-${entities[sub]}/ses-${entities[ses]}/${entities[datatype]}/${path}"
fi

if [[ ! -z ${entities[bids_dir]} ]]; then
    path="${entities[bids_dir]}/${path}"
elif [[ ! -z ${entities[output_dir]} ]]; then
    path="${entities[output_dir]}/${path}"
fi

entities_skip=(bids_dir output_dir analysis_level ses datatype)
for key in ${entities_order[@]}; do
    if [[ -z ${entities[${key}]} ]] || [[ ${entities_req[@]} =~ ${key} ]] || [[ ${entities_skip[@]} =~ ${key} ]]; then
        continue
    fi
    path="${path}_${key}-${entities[${key}]}"
done
path="${path}_${entities[suffix]}${entities[extension]}"
echo ${path}
